package com.doobs.exort.math.matrix;

public class Matrix {
    private double[] data;
    private int dimension;

    /**
     * Post: Creates an "n" by "n" identity Matrix.
     */
    public Matrix(int n) {
	this.data = new double[n * n];
	this.dimension = n;
	this.loadIdentity();
    }

    /**
     * Pre: "data" represents a square Matrix.
     * 
     * Post: Creates a Matrix with "data" as its entries.
     */
    public Matrix(double[] data) {
	this.data = data;
	this.dimension = (int) Math.sqrt(data.length);
    }

    /**
     * Post: Replaces this Matrix with the identity Matrix.
     */
    public void loadIdentity() {
	for (int i = 0; i < this.dimension; i++) {
	    for (int j = 0; j < this.dimension; j++) {
		if (i == j) {
		    this.data[i * this.dimension + j] = 1;
		} else {
		    this.data[i * this.dimension + j] = 0;
		}
	    }
	}
    }

    /**
     * Post: Returns the resulting Matrix from this Matrix multiplied by
     * "other".
     */
    public Matrix multiply(Matrix other) {
	if (this.dimension != other.dimension) {
	    throw new IllegalArgumentException(
		    "Both matrices must be of the same dimension.");
	}
	Matrix result = new Matrix(this.dimension);
	for (int row = 0; row < this.dimension; row++) {
	    for (int col = 0; col < this.dimension; col++) {
		// Sum all entries from the "row" of this and the "col" of
		// "other".
		double sum = 0.0;
		// "i" represents the column of this and the row of "other".
		for (int i = 0; i < this.dimension; i++) {
		    sum += this.data[i + row * this.dimension]
			    * other.data[col + i * this.dimension];
		}
		result.data[col + row * this.dimension] = sum;
	    }
	}
	return result;
    }
    
    public static void main(String[] args) {
	Matrix one = new Matrix(2);
	Matrix two = new Matrix(2);
	System.out.println(one.multiply(two));
    }
}
